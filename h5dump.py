# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-trace-python Documentation for the list of available functions.

import os
import sys

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

import pandas as pd
import pandas.io.pytables as pt
import datetime as dt
import numpy as np
import copy

from perf_trace_context import *
from Core import *

events   = {}
filename = None

def mapType(s):
    """
    Map a type as returned through perf callback to 
    a type suitable for a pytables instance
    Return a pair priority,type. Priority should be
    used in case a single series contain multiple
    different types
    """
    if s == int:
        return 1, np.dtype('<i8')
    elif s == long:
        return 2, np.dtype('<u8')
    elif s == type(str('')):
        return 3, np.dtype('|S16')
    else:
        return 0, s

def trace_begin():
    global filename
    # print "+++ in trace_begin"
    import sys
    if len(sys.argv) < 2:
        print("(EE) missing filename")
        sys.exit(1)
    filename = sys.argv[1]

def trace_end():
    print("+++ opening file '%s'" % filename)
    store = pt.HDFStore(filename)
    for event_name in events:
        print("+++ adding group for event '%s': %d entry(ies) found" \
            % (event_name, len(events[event_name])))

        # enrich data with a timestamp that will
        # be used as index. We don't use python
        # datetime & timedelta instances as they
        # are not natively supported by PyTables
        first = True
        types = set()
        index = []
        for s in events[event_name]:
            timestamp = s['common_s'] + float(s['common_ns'])/1000
            index.append(timestamp)

        # build type mapping
        # to avoid PerformanceWarning becaused of mixed types (int/long)
        # or generic objects
        df = pd.DataFrame(events[event_name], index=index)
        types = {}
        for col in df:
            types[col] = set(map(type, df[col])) 
        for col, srcTypes in types.iteritems():
            dstTypes = map(mapType, srcTypes)
            dstTypes.sort()
            dstType = dstTypes[-1][1] # dstType should be the one with the highest priority

            # change type if necessary
            if df[col].dtype != dstType:
                print("   %s: changing col '%s' type %s->%s" % (event_name, col, str(df[col].dtype), str(dstType)))
                df[col] = df[col].astype(dstType) 

        print("+++ storing dataframe, event:%s size:%d columns:%s" % (event_name, df.shape[0], ",".join(df.columns)))
        print(df.head())
        store[event_name] = df
    store.close()

        

def trace_unhandled(event_name, context, event_fields_dict):
    events.setdefault(event_name, []).append(copy.deepcopy(event_fields_dict))


# if __name__ == '__main__':
#print('This script is supposed to be loaded by perf and and run directly')
#    print('Usage: perf script -s h5dump.py <filename>')
